// The skeleton of this was generated by Thrift.

#include "Bitbox.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

extern "C" {
#include "bitbox.h"
}

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class BitboxHandler : virtual public BitboxIf {
    private:
        bitbox_t * box;

    public:
        BitboxHandler() {
            this->box = bitbox_new();
        }

        bool get_bit(const std::string& key, const int32_t bit) {
            return bitbox_get_bit(this->box, key.c_str(), bit);
        }

        void set_bit(const std::string& key, const int32_t bit) {
            bitbox_set_bit(this->box, key.c_str(), bit);
        }

        void set_bits(const std::string& key, const std::set<int32_t> & bits) {
            std::set<int32_t>::const_iterator it;
            for(it = bits.begin(); it != bits.end(); ++it)
                bitbox_set_bit(this->box, key.c_str(), *it);
        }
};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<BitboxHandler> handler(new BitboxHandler());
  shared_ptr<TProcessor> processor(new BitboxProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

