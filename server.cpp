// The skeleton of this was generated by Thrift.

#include "Bitbox.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

#include <vector>
#include <sys/poll.h>
#include <stdio.h>
#include <inttypes.h>

extern "C" {
#include "bitbox.h"
}

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class BitboxHandler : virtual public BitboxIf {
    public:
        bitbox_t * box;

        BitboxHandler() {
            this->box = bitbox_new();
        }

        bool get_bit(const std::string& key, const int64_t bit) {
            return bitbox_get_bit(this->box, key.c_str(), bit);
        }

        void set_bit(const std::string& key, const int64_t bit) {
            bitbox_set_bit(this->box, key.c_str(), bit);
        }

        void set_bits(const std::string& key, const std::set<int64_t> & bits) {
            for(std::set<int64_t>::const_iterator it = bits.begin(); it != bits.end(); ++it)
            {
                bitarray_t * b = bitbox_find_array(this->box, key.c_str());
                bitbox_set_bit_nolookup(this->box, key.c_str(), b, *it);
            }
        }
};

gboolean server_prepare_callback(GSource * source, gint * timeout_) {
    *timeout_ = -1;
    return FALSE;
}

typedef struct {
    GSource source;
    GPollFD poll_fd;
} ServerSource;

gboolean server_check_callback(GSource * source)
{
    ServerSource * ssource = (ServerSource *)source;
    //fprintf(stderr, "IO IN? %d\n", ssource->poll_fd.revents & G_IO_IN ? 1 : 0);
    return ssource->poll_fd.revents & G_IO_IN ? TRUE : FALSE;
}

TSimpleServer * global_server = NULL;
gboolean server_dispatch_callback(GSource * source, GSourceFunc callback, gpointer user_data)
{
    // XXX use g_source_set_callback() to do the callback properly without a global.
    fprintf(stderr, "SERVE\n");
    global_server->serve();
    return TRUE;
}

gboolean idle_cleanup(gpointer data)
{
    bitbox_t * box = (bitbox_t *)data;
    bitbox_cleanup_single_step(box);
    return bitbox_cleanup_needed(box) ? TRUE : FALSE;
}

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<BitboxHandler> handler(new BitboxHandler());
  shared_ptr<TProcessor> processor(new BitboxProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory, true);
  global_server = &server;
  serverTransport->listen(); // XXX should catch TTransportException
  std::vector<struct pollfd> fds = serverTransport->getFDs();

  // add the server polling source to the main loop

  GSourceFuncs sourcefuncs;

  sourcefuncs.prepare = server_prepare_callback;
  sourcefuncs.check = server_check_callback;
  sourcefuncs.dispatch = server_dispatch_callback;
  sourcefuncs.finalize = NULL;
  sourcefuncs.closure_callback = NULL;
  sourcefuncs.closure_marshal = NULL;

  for(std::vector<struct pollfd>::iterator it = fds.begin(); it != fds.end(); ++it)
  {
      ServerSource * source = (ServerSource *)g_source_new(&sourcefuncs, sizeof(ServerSource));
      source->poll_fd.fd = it->fd;
      source->poll_fd.events = G_IO_IN;
      g_source_add_poll((GSource *)source, &source->poll_fd);
      g_source_attach((GSource *)source, NULL);
  }

  // add the idle function to the main loop

  g_idle_add(idle_cleanup, handler->box);

  // start the main loop

  GMainLoop * loop = g_main_loop_new(NULL, FALSE);
  g_main_loop_run(loop);
  return 0;
}

